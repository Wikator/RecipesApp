@page "/my_recipes"
@inject IRecipeService RecipeService
@attribute [Authorize]
@rendermode @(new InteractiveAutoRenderMode(prerender: false))

<h3>Your recipes</h3>

<NavLink class="btn btn-dark" href="/recipes/create">Create new</NavLink>

<div class="page-size-chooser">
    Items per page:
    <select @bind="@pagination.ItemsPerPage">
        <option>5</option>
        <option>10</option>
        <option>20</option>
        <option>50</option>
    </select>
</div>

<QuickGrid ItemsProvider="recipeProvider" Pagination="@pagination" @ref="grid" Class="border">
    <TemplateColumn Title="Picture">
        <div class="flex items-center">
            <img src="@(context.ImageUrl)" alt="@context.Name" width="200" height="150" />
        </div>
    </TemplateColumn>
    <PropertyColumn Property="@(r => r.Name)" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="NameSearch" @bind:event="oninput" placeholder="Recipe name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <TemplateColumn Title="Actions">
        <NavLink class="btn btn-warning" href="@($"recipes/update/{context.Id}")">Edit</NavLink>
        <button class="btn btn-danger" @onclick="@(_ => DeleteRecipeAsync(context.Id))">Delete</button>
    </TemplateColumn>
</QuickGrid>

<Paginator State="@pagination" />


@code {
    QuickGrid<RecipeReadOnlyDto>? grid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    GridItemsProvider<RecipeReadOnlyDto>? recipeProvider;
    string? nameSearch;
    string? deleteErrorMessage;

    string? NameSearch
    {
        get => nameSearch;
        set
        {
            nameSearch = value;

            if (grid is not null)
                _ = grid.RefreshDataAsync();
        }
    }

    protected override void OnInitialized()
    {
        recipeProvider = async (req) =>
        {
            try
            {
                var stringQuerry = req.GetSortByProperties().Aggregate(new StringBuilder(), (sb, curr) =>
                    sb.Append(curr.PropertyName + (curr.Direction == SortDirection.Descending ? " desc" : string.Empty) + ',')
                );

                var result = await RecipeService.GetUserPagedItemsAsync(
                    req.StartIndex / req.Count + 1 ?? 1,
                    req.Count ?? int.MaxValue,
                    stringQuerry.ToString(),
                    nameSearch
                    );

                if (result.Data is null)
                    return EmptyProvider();

                return GridItemsProviderResult.From(result.Data, result.Data.TotalCount);
            }
            catch
            {
                return EmptyProvider();
            }
        };
    }

    private async Task DeleteRecipeAsync(int id)
    {
        var result = await RecipeService.DeleteAsync(id);

        if (result.IsSuccessful)
            await grid!.RefreshDataAsync();
        else
            deleteErrorMessage = result.Message;
    }

    private GridItemsProviderResult<RecipeReadOnlyDto> EmptyProvider() =>
        GridItemsProviderResult.From(Array.Empty<RecipeReadOnlyDto>(), 0);
}
