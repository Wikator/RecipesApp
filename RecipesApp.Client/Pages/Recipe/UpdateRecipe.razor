@page "/recipes/update/{id:int}"
@inject NavigationManager NavigationManager
@inject IRecipeService RecipeService
@inject IMapper Mapper
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@attribute [Authorize]

<h3>Update Recipe</h3>

@if(model is null)
{
    <div class="alert alert info">Loading...</div>
}
else
{
    <button class="btn btn-lg btn-danger" @onclick="Delete">Delete</button>
    <ErrorMessage Message="@deleteError" />
    <ErrorMessage Message="@updateError" />

    <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="model.Name" />
            <ValidationMessage For="@(() => model.Name)" />
        </div>
        <div class="mb-3">
            <label for="text" class="form-label">Text</label>
            <InputText id="text" class="form-control" @bind-Value="model.Text" />
            <ValidationMessage For="@(() => model.Text)" />
        </div>

        <hr />

        @foreach (var ingredient in model.Ingredients)
        {
            var guid = Guid.NewGuid().ToString();

            <div class="mb-3">
                <label for="@("ingredient-name-" + guid)" class="form-label">Text</label>
                <InputText id="@("ingredient-name-" + guid)" class="form-control" @bind-Value="ingredient.Name" />
                <ValidationMessage For="@(() => ingredient.Name)" />
            </div>

            guid = Guid.NewGuid().ToString();

            <div class="mb-3">
                <label for="@("ingredient-amount-" + guid)" class="form-label">Amount</label>
                <InputText id="@("ingredient-amount-" + guid)" class="form-control" @bind-Value="ingredient.Amount" />
                <ValidationMessage For="@(() => ingredient.Amount)" />
            </div>

            guid = Guid.NewGuid().ToString();

            <div class="mb-3">
                <label for="@("ingredient-notes-" + guid)" class="form-label">Notes</label>
                <InputText id="@("ingredient-notes-" + guid)" class="form-control" @bind-Value="ingredient.Notes" />
                <ValidationMessage For="@(() => ingredient.Notes)" />
            </div>

            <button type="button" class="btn btn-danger" @onclick="@(_ => RemoveIngredient(ingredient))">Remove this ingredient</button>
            <hr />
        }

        <button type="button" class="btn btn-info" @onclick="AddIngredient">Add ingredient</button>

        <hr />
        
        <div class="mb-3">
            @if (model.UseOldPicture)
            {
                @if (OldPictureUrl is not null)
                {
                    <label>Preview:</label>
                    <img src="@OldPictureUrl" alt="Preview" class="img-thumbnail" style="max-width: 200px; max-height: 200px;" />
                }
            }
            else
            {
                @if (model.FileContent != null)
                {
                    <label>Preview:</label>
                    <img src="data:image;base64,@Convert.ToBase64String(model.FileContent)" alt="Preview" class="img-thumbnail" style="max-width: 200px; max-height: 200px;" />
                    <button class="btn btn-danger" @onclick="RemovePicture">Remove Picture</button>                    
                }
            }               
        </div>

        @if (model.UseOldPicture)
        {
            <button type="button" class="btn btn-warning" @onclick="@(_ => model.UseOldPicture = false)">Choose new picture</button>
        }
        else
        {
            <InputFile OnChange="HandleFileChange" @key="fileInputKey" />
            @if (OldPictureUrl is not null)
            {
                <button type="button" class="btn btn-warning" @onclick="@(_ => model.UseOldPicture = true)">Use Old Picture</button>
            }
        }
        <button type="submit" class="btn btn-primary" disabled="@(!context.Validate() || isSubmitting)">Update</button>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }

    RecipeUpdateDto? model;
    private string? OldPictureUrl;
    string? updateError;
    string? deleteError;
    string fileInputKey = Guid.NewGuid().ToString();
    bool isSubmitting;

    protected override async Task OnParametersSetAsync()
    {
        if (Id is null)
        {
            NavigationManager.NavigateTo("recipes");
        }
        else
        {
            var response = await RecipeService.GetByIdAsync(Id.Value);

            if (response.Result is null)
                NavigationManager.NavigateTo("recipes");
            else
            {
                model = Mapper.Map<RecipeUpdateDto>(response.Result);
                OldPictureUrl = response.Result.ImageUrl;
            }      
        }
    }

    async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        if (model is null)
            return;

        var file = e.File;

        // Read the file content into a byte array
        using (var stream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(stream);
            model.FileContent = stream.ToArray();
        }

        // Set the file name
        model.FileName = file.Name;
    }

    void AddIngredient()
    {
        var ingredient = new IngredientUpsertDto()
            {
                Amount = "0",
                Name = "New Ingredient"
            };

        model?.Ingredients.Add(ingredient);
    }

    void RemoveIngredient(IngredientUpsertDto ingredient)
    {
        model?.Ingredients.Remove(ingredient);
    }

    void RemovePicture()
    {
        if (model is null)
            return;

        model.FileContent = null;
        model.FileName = null;

        fileInputKey = Guid.NewGuid().ToString();
    }

    async Task HandleValidSubmit()
    {
        if (Id is null || model is null)
            return;

        isSubmitting = true;

        var response = await RecipeService.UpdateAsync(Id.Value, model);

        if (response.IsSuccessful)
            NavigationManager.NavigateTo($"recipes/details/{Id}");
        else
        {
            isSubmitting = false;
            updateError = response.Message;
        }
    }

    async Task Delete()
    {
        if (Id is null)
            return;

        isSubmitting = true;

        var response = await RecipeService.DeleteAsync(Id.Value);

        if (response.IsSuccessful)
            NavigationManager.NavigateTo($"recipes/");
        else
        {
            isSubmitting = false;
            deleteError = response.Message;
        }
    }
}
