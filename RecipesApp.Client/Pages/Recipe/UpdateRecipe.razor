@page "/recipes/update/{id:int}"
@inject NavigationManager NavigationManager
@inject IRecipeService RecipeService
@inject IMapper Mapper
@rendermode @(new InteractiveAutoRenderMode(prerender: false))
@attribute [Authorize]

<h3>Update Recipe</h3>

@if(model is null)
{
    if (fetchError is null)
    {
        <div class="aler alert info">Loading...</div>
    }
    else
    {
        <div class="alert alert-danger">@fetchError</div>
    }
}
else
{
    <button class="btn btn-lg btn-danger" @onclick="Delete">Delete</button>
    <ErrorMessage Message="@deleteError" />
    <ErrorMessage Message="@updateError" />

    <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="model.Name" />
        </div>
        <div class="mb-3">
            <label for="text" class="form-label">Text</label>
            <InputText id="text" class="form-control" @bind-Value="model.Text" />
        </div>
        <InputFile OnChange="HandleFileChange" />
        <button type="submit" class="btn btn-primary" disabled="@(!context.Validate() || isSubmitting)">Update</button>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }

    RecipeUpsertDto? model;
    string? updateError;
    string? deleteError;
    string? fetchError;
    bool isSubmitting;

    protected override async Task OnParametersSetAsync()
    {
        if (Id is null)
        {
            NavigationManager.NavigateTo("recipes");
        }
        else
        {
            var response = await RecipeService.GetByIdAsync(Id.Value);

            if (response.Result is null)
                NavigationManager.NavigateTo("recipes");
            else
                model = Mapper.Map<RecipeUpsertDto>(response.Result);
        }
    }

    async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        if (model is null)
            return;

        var file = e.File;

        // Read the file content into a byte array
        using (var stream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(stream);
            model.FileContent = stream.ToArray();
        }

        // Set the file name
        model.FileName = file.Name;
    }

    async Task HandleValidSubmit()
    {
        if (Id is null || model is null)
            return;

        isSubmitting = true;

        var response = await RecipeService.UpdateAsync(Id.Value, model);

        if (response.IsSuccessful)
            NavigationManager.NavigateTo($"recipes/details/{Id}");
        else
        {
            isSubmitting = false;
            updateError = response.Message;
        }
    }

    async Task Delete()
    {
        if (Id is null)
            return;

        isSubmitting = true;

        var response = await RecipeService.DeleteAsync(Id.Value);

        if (response.IsSuccessful)
            NavigationManager.NavigateTo($"recipes/");
        else
        {
            isSubmitting = false;
            updateError = response.Message;
        }
    }
}
