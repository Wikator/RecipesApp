@inject ICommentService CommentService
@rendermode InteractiveAuto

@if (CommentList is not null && RecipeId is not null)
{
    <div class="comments-container">
    <h3 class="mt-4">Comments:</h3>
    @foreach (var comment in CommentList)
    {
        <div class="comment">
            <p><strong>@(comment.Author ?? "<DELETED USER>")</strong> @comment.Text</p>
        </div>
    }
    </div>


    @if (model is not null)
    {
        <AuthorizeView Context="authContext">
            <Authorized>
                <button class="btn btn-danger mb-3" @onclick="(_ => model = null)">Discard comment</button>
                <EditForm Model="model" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <InputTextArea id="name" class="form-control" @bind-Value="model.Text" />
                    </div>
                    <p class="text-danger">@error</p>
                    <button class="btn btn-info mb-3" type="submit">Add!</button>
                </EditForm>
            </Authorized>
            <NotAuthorized>
                <RedirectToLogin />
            </NotAuthorized>
        </AuthorizeView>
    }
    else
    {
        <button class="btn btn-info mt-3 mb-3" @onclick="(_ => model = new CommentUpsertDto() { RecipeId = RecipeId.Value })">Add comment</button>
    } 
}


@code {
    [Parameter, EditorRequired] public int? RecipeId { get; init; }
    [Parameter, EditorRequired] public List<CommentReadOnlyDto>? CommentList { get; init; }
    private CommentUpsertDto? model;
    private string? error;

    async Task HandleSubmit()
    {
        if (model is null || CommentList is null)
            return;

        var response = await CommentService.AddComment(model);

        if (response.Data is not null)
        {
            CommentList.Add(response.Data);
            model = null;
        }
        else
        {
            error = response.Message;
        }
    }
}
