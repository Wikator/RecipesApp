@page "/recipes/details/{id:int}"
@using System.ComponentModel.DataAnnotations
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<div id="recipeDetailsContainer">
    @if (recipe is null)
    {
        <Spinner />
    }
    else
    {
        <div class="container mt-5">
            <div class="row">
                <div class="col-md-8 offset-md-2 recipe-container">
                    <div class="row">
                        <div class="col-md-6">
                            <img src="@recipe.ImageUrl" class="img-fluid rounded recipe-image" alt="Recipe Image">
                        </div>
                        <div class="col-md-6">
                            <h1 class="mt-3 text-center">@recipe.Name</h1>
                            <h3 class="mt-4 text-center">Ingredients:</h3>
                            <ul class="ingredients-list text-center">
                                @foreach (var ingredient in recipe.Ingredients)
                                {
                                    <li>@ingredient.Name - @ingredient.Amount</li>
                                }
                            </ul>
                        </div>
                    </div>
                    <h2 class="mt-5 text-center">Instructions:</h2>
                    <p class="instructions">@recipe.Text</p>

                    <Comments CommentList="recipe.Comments" RecipeId="recipe.Id" />

                    <NavLink href="/" class="btn btn-secondary btn-back">Back to list</NavLink>
                    
                    <hr />
                    
                    @if (recipe.UserReview is null)
                    {
                        <div class="review-form-container">
                            <p>Rate this recipe from 1 to 5</p>
                            <EditForm FormName="AddReview" Model="Model" OnValidSubmit="Review" Enhance>
                                <DataAnnotationsValidator />
                                <div class="mb-3">
                                    <label for="rating" class="form-label">Rating</label>
                                    <InputNumber id="rating" class="form-control" @bind-Value="Model.Rating" />
                                    <ValidationMessage For="@(() => Model.Rating)" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-primary">Submit</button>
                                </div>
                            </EditForm>
                        </div>
                    }
                    else
                    {
                        <div class="user-rating-container">
                            <form method="post"
                                  @formname="DeleteReview"
                                  @onsubmit="DeleteReview"
                                  data-enhance>
                                
                                <p>Your rating: @(recipe.UserReview)/5</p>
                                <button type="submit" class="btn btn-danger">Delete Review</button>
                                <AntiforgeryToken />
                            </form>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int? Id { get; set; }
    private RecipeReadOnlyDetailsDto? recipe;
    
    [SupplyParameterFromForm]
    private ReviewModel Model { get; set; } = new();

    class ReviewModel
    {
        [Range(1, 5)]
        public int Rating { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var result = await RecipeService.GetByIdAsync(Id.Value);

            if (result.Data is null)
                NavigationManager.NavigateTo("/");
            else
            {
                recipe = result.Data;
                // Model.Rating = result.Data.UserReview ?? 0;
            }
        }
    }

    async Task Review()
    {
        if (Id is null || recipe is null)
            return;
        
        var result = await RecipeService.AddReviewAsync(Id.Value, Model.Rating);
        
        if (result.IsSuccessful)
        {
            recipe.UserReview = Model.Rating;
            Model = new ReviewModel();
        }
    }
    
    async Task DeleteReview()
    {
        if (Id is null || recipe is null)
            return;

        var result = await RecipeService.RemoveReviewAsync(Id.Value);

        if (result.IsSuccessful)
        {
            recipe.UserReview = null;
            Model = new ReviewModel();
        }
    }
}